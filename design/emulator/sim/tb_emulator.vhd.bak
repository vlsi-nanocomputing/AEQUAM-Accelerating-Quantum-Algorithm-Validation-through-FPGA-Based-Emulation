LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;
USE STD.TEXTIO.ALL;
USE IEEE.STD_LOGIC_TEXTIO.ALL;

ENTITY tb_emulator IS

END ENTITY;

ARCHITECTURE beh OF tb_emulator IS

	COMPONENT EMULATOR_N_3_W_0_S_0_Q_2 IS
		GENERIC( K : INTEGER := 20 );
		PORT (
			EMULATOR_N_3_W_0_S_0_Q_2_IN_FROM_MCU : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
			EMULATOR_N_3_W_0_S_0_Q_2_IN_CLK : IN STD_LOGIC;
	EMULATOR_N_3_W_0_S_0_Q_2_IN_RSTN : IN STD_LOGIC;
			EMULATOR_N_3_W_0_S_0_Q_2_OUT_TO_MCU : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
			EMULATOR_N_3_W_0_S_0_Q_2_IN_OUT_BUS : INOUT STD_LOGIC_VECTOR (K-1 DOWNTO 0)
		);
	END COMPONENT;

	SIGNAL RST : STD_LOGIC;
	SIGNAL SEND_DATA_DEL : STD_LOGIC := '0';
	SIGNAL CLK_FPGA,START, SEND_DATA, CLK_MCU : STD_LOGIC;
	SIGNAL TO_MCU, FROM_MCU: STD_LOGIC_VECTOR(1 DOWNTO 0);
	SIGNAL TO_INTERFACE : STD_LOGIC_VECTOR(19 DOWNTO 0) := (OTHERS => 'Z');
	SIGNAL INTERFACE, INTERFACE_BUF : STD_LOGIC_VECTOR(19 DOWNTO 0):=(OTHERS => 'Z');

	FILE TEST_FILE, RES_FILE : TEXT;

BEGIN

	DUT : EMULATOR_N_3_W_0_S_0_Q_2  GENERIC MAP (20)
									PORT MAP (
										EMULATOR_N_3_W_0_S_0_Q_2_IN_FROM_MCU => FROM_MCU ,
										EMULATOR_N_3_W_0_S_0_Q_2_IN_CLK => CLK_FPGA ,
										EMULATOR_N_3_W_0_S_0_Q_2_IN_RSTN => RST,
										EMULATOR_N_3_W_0_S_0_Q_2_OUT_TO_MCU => TO_MCU ,
										EMULATOR_N_3_W_0_S_0_Q_2_IN_OUT_BUS => INTERFACE
									);

	CLK_GEN_MCU : PROCESS 
	BEGIN
	
		CLK_MCU <= '1';
		WAIT FOR 100 NS;
		CLK_MCU <= '0';
		WAIT FOR 100 NS;
	
	END PROCESS CLK_GEN_MCU;

	CLK_GEN_FPGA : PROCESS 
	BEGIN
	
		CLK_FPGA <= '1';
		WAIT FOR 10 NS;
		CLK_FPGA <= '0';
		WAIT FOR 10 NS;
	
	END PROCESS CLK_GEN_FPGA;

	RST <= '0', '1' AFTER 30 NS;

	START <= '0', '1' AFTER 50 NS;

	FILE_OPEN(TEST_FILE,"test_file.txt",read_mode);
	FILE_OPEN(RES_FILE,"res_file.txt",write_mode);

	
	DEL_DATA : PROCESS
	BEGIN
	
		SEND_DATA_DEL <= '0';
		WAIT FOR 2 NS;
		SEND_DATA_DEL <= SEND_DATA;
		WAIT FOR 8 NS;
	END PROCESS DEL_DATA;

	--INTERFACE_BUF <= TO_INTERFACE WHEN SEND_DATA_DEL = '1' ELSE (OTHERS => 'Z');
	--INTERFACE <= INTERFACE_BUF;
	INTERFACE <= TO_INTERFACE;
	

	READ_WRITE_FILE : PROCESS(CLK_MCU)--(START,TO_MCU)
	VARIABLE PHASE,R_I : INTEGER :=0;
	VARIABLE COUNT : INTEGER RANGE 0 TO 256;
	VARIABLE TEST_LINE, RES_LINE : LINE;
	VARIABLE TEST_DATA : STD_LOGIC_VECTOR(31 DOWNTO 0);
	BEGIN
		TO_INTERFACE <= (OTHERS => 'Z');
		SEND_DATA <= '0';
	IF RISING_EDGE(CLK_MCU) THEN
		IF START = '1' THEN
		
			IF PHASE = 0 THEN
			
				FROM_MCU <= "11";
				PHASE := 1;
				COUNT := 0;
			
			ELSIF PHASE = 1 AND TO_MCU(0)'EVENT  THEN
			
				
				--FROM_MCU(1) <= '0';
				FROM_MCU(0) <= NOT FROM_MCU(0);
				READLINE(TEST_FILE,TEST_LINE);
				READ(TEST_LINE,TEST_DATA);
				TO_INTERFACE <= TEST_DATA(19 DOWNTO 0);
				SEND_DATA <= '1';
				PHASE := 2;
			
			ELSIF PHASE = 2 AND TO_MCU(0)'EVENT THEN
				
				IF COUNT < 0 THEN
				
					READLINE(TEST_FILE,TEST_LINE);
					READ(TEST_LINE,TEST_DATA);
					TO_INTERFACE <= TEST_DATA(19 DOWNTO 0);
					SEND_DATA <= '1';
					FROM_MCU(0) <= NOT FROM_MCU(0);
					
					COUNT := COUNT + 1;
				
				ELSIF COUNT = 0 THEN
				
					READLINE(TEST_FILE,TEST_LINE);
					READ(TEST_LINE,TEST_DATA);
					TO_INTERFACE <= TEST_DATA(19 DOWNTO 0);
					SEND_DATA <= '1';
					FROM_MCU(0) <= NOT FROM_MCU(0);
				
					COUNT := COUNT + 1;
				
				ELSIF COUNT > 0 THEN
					READLINE(TEST_FILE,TEST_LINE);
					READ(TEST_LINE,TEST_DATA);
					TO_INTERFACE <= TEST_DATA(19 DOWNTO 0);
					SEND_DATA <= '1';
					
					FROM_MCU(1) <= '0';
					FROM_MCU(0) <= NOT FROM_MCU(0);
					
					--FROM_MCU <= "01";
					COUNT := 0;
					PHASE := 3;
				
				END IF;
				
				
		
			ELSIF PHASE = 3 AND TO_MCU(0)'EVENT THEN
			
				IF NOT ENDFILE(TEST_FILE) THEN
			
					READLINE(TEST_FILE,TEST_LINE);
					READ(TEST_LINE,TEST_DATA);
					TO_INTERFACE <= TEST_DATA(19 DOWNTO 0);
					SEND_DATA <= '1';
					FROM_MCU(0) <= NOT FROM_MCU(0);
				ELSE 
					PHASE := 4;
					COUNT := 0;
					FROM_MCU(0) <= NOT FROM_MCU(0);
					FROM_MCU(1) <= '1';
					
					--FROM_MCU <= "10";
					TO_INTERFACE <= (OTHERS => 'Z');
						--R_I := 1;
					
						--WRITE(RES_LINE, TO_INTEGER(UNSIGNED(INTERFACE)));
						--WRITE(RES_LINE, ' ');
				
				END IF;
			
			ELSIF PHASE = 4 AND TO_MCU(1)'EVENT THEN
			
				IF COUNT < 128 THEN
					
					IF R_I = 0 THEN
						R_I := 1;
					
						WRITE(RES_LINE, TO_INTEGER(SIGNED(INTERFACE)));
						WRITE(RES_LINE, ' ');
						FROM_MCU(0) <= NOT FROM_MCU(0);
						
					
					ELSE 
						R_I := 0;
						WRITE(RES_LINE, TO_INTEGER(SIGNED(INTERFACE)));
						WRITELINE(RES_FILE,RES_LINE);
						FROM_MCU(0) <= NOT FROM_MCU(0);
					END IF;
					COUNT := COUNT + 1 ;
					
				ELSE
					FROM_MCU <= "00";
					INTERFACE <= (OTHERS => '0');
					COUNT :=0;
					PHASE := 6;
				END IF;
				
				--COUNT := COUNT + 1 ;
			
			END IF;
		
		ELSE 
		
			FROM_MCU <= "00";
		
		END IF;
	END IF;
	
	END PROCESS READ_WRITE_FILE;

	FILE_CLOSE(TEST_FILE);
	FILE_CLOSE(RES_FILE);

END beh;